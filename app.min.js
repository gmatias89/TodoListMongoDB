require("dotenv").config(); const express = require("express"); const bodyParser = require("body-parser"); const mongoose = require("mongoose"); const app = express(); const _ = require("lodash"); app.set('view engine', 'ejs'); app.use(bodyParser.urlencoded({ extended: !0 })); app.use(express.static("public")); mongoose.connect(process.env.DATABASE, { useNewUrlParser: !0, useUnifiedTopology: !0 }); const itemSchema = new mongoose.Schema({ name: String }); const Item = mongoose.model("Item", itemSchema); item1 = new Item({ name: "Bienvenido" }); item2 = new Item({ name: "Para agregar tareas presione el +" }); item3 = new Item({ name: "Para Borrarlas presione el checkbox <--" }); const defaultItems = [item1, item2, item3]; const listSchema = { name: String, items: [itemSchema] }; const List = mongoose.model("List", listSchema); app.get("/", function (req, res) { Item.find({}, function (err, result) { if (result.length === 0) { Item.insertMany(defaultItems, function (err) { if (err) { console.log(err) } else { console.log("Items por defecto agregados satisfactoriamente") } }); res.redirect("/") } else { res.render("list", { listTitle: "Home", newListItems: result }) } }) }); app.post("/", function (req, res) { const itemName = req.body.newItem; const listName = req.body.list; const item = new Item({ name: itemName }); if (listName === "Home") { item.save(function (err) { if (err) { console.log(err) } else { console.log("Item Agregado Con exito"); res.redirect("/") } }) } else { List.findOne({ name: listName }, function (err, foundList) { if (err) { console.log(err) } else { foundList.items.push(item); foundList.save(); res.redirect("/" + listName) } }) } }); app.post("/delete", function (req, res) { const itemId = req.body.checkbox; const listName = req.body.listName; if (listName === "Home") { Item.findByIdAndRemove(itemId, function (err) { if (err) { console.log(err) } else { console.log("El item se borro con exito"); res.redirect("/") } }) } else { List.findOneAndUpdate({ name: listName }, { $pull: { items: { _id: itemId } } }, function (err, foundList) { if (!err) { res.redirect("/" + listName) } else { console.log(err) } }) } }); app.get("/:customLista", function (req, res) { const parametroLista = _.capitalize(req.params.customLista); if (parametroLista === "About") { res.render("about") } else { List.findOne({ name: parametroLista }, function (err, foundList) { if (!err) { if (!foundList) { const list = new List({ name: parametroLista, items: defaultItems }); list.save(); res.redirect("/" + parametroLista) } else { res.render("list", { listTitle: parametroLista, newListItems: foundList.items }) } } else { console.log(err) } }) } }); let port = process.env.PORT; if (port == null || port == "") { port = 3000 }
app.listen(port, function () { console.log("Server started on port: " + port) })